version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-safety-postgres
    environment:
      POSTGRES_USER: ai_safety
      POSTGRES_PASSWORD: ai_safety_password
      POSTGRES_DB: ai_safety_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_safety"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-safety-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-safety-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-safety-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-safety-backend
    environment:
      - DATABASE_URL=postgresql://ai_safety:ai_safety_password@postgres:5432/ai_safety_db
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - API_HOST=0.0.0.0
      - API_PORT=8000
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - ai-safety-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-safety-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - ai-safety-network

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-safety-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - ai-safety-network

  # IPFS (Optional - for storing large decision data)
  ipfs:
    image: ipfs/go-ipfs:latest
    container_name: ai-safety-ipfs
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - ai-safety-network
    profiles:
      - with-ipfs

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  ipfs_data:

networks:
  ai-safety-network:
    driver: bridge

